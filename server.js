// server.js
const express = require('express');
const puppeteer = require('puppeteer');
const path = require('path');

const app = express();
app.use(express.json());

// Función para generar HTML desde los datos
function generateHTML(data) {
  const t = data.lang === 'es' ? {
    reportTitle: "Soma Express Audit Report",
    siteEvaluated: "Sitio evaluado",
    date: "Fecha",
    introduction: "Introducción",
    findings: "Hallazgos clave",
    quickWins: "Quick‑wins (esta semana)",
    roadmap: "Roadmap 30‑90 días",
    conclusion: "Conclusión",
    impact: "Impacto",
    effort: "Esfuerzo"
  } : {
    reportTitle: "Soma Express Audit Report",
    siteEvaluated: "Site evaluated",
    date: "Date",
    introduction: "Introduction",
    findings: "Key findings",
    quickWins: "Quick wins (this week)",
    roadmap: "Roadmap 30‑90 days",
    conclusion: "Conclusion",
    impact: "Impact",
    effort: "Effort"
  };

  const stars = (n) => "★".repeat(n) + "☆".repeat(5 - n);

  return `
    <!DOCTYPE html>
   <!DOCTYPE html>
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>${t.reportTitle}</title>
<style>
:root {
  --ink: #0f172a;
  --flow: hsl(148 50% 45%);
  --bg: #fafafa;
  --g100: #f8fafc;
  --g200: #e2e8f0;
  --g500: #64748b;
  --g600: #475569;
}

html, body {
  height: 100%;
  margin: 0;
  padding: 0;
}

body {
  font-family: 'Space Grotesk', sans-serif;
  color: var(--ink);
  background: #fff;
  max-width: 750px;
  margin: 0 auto;
  padding: 30px 20px 80px 20px; /* espacio inferior para footer */
  line-height: 1.5;
  font-size: 11px;
  display: flex;
  flex-direction: column;
  min-height: 100%;
  position: relative;
  box-sizing: border-box;
}

h1 {
  font-size: 14px;
  font-weight: 600;
  margin-bottom: 12px;
}

h2 {
  font-size: 12px;
  font-weight: 600;
  margin-bottom: 10px;
}

.section-title {
  font-size: 12px;
  font-weight: 600;
  margin-bottom: 8px;
}

.header {
  margin-bottom: 40px;
  text-align: center;
}

.logo {
  display: block;
  width: 28px;
  height: 28px;
  margin: 0 auto 8px;
}

.section {
  margin-bottom: 40px;
}

table {
  width: 100%;
  border-collapse: collapse;
  background: #fff;
  border: 1px solid var(--g200);
  font-size: 10px;
  margin-bottom: 20px;
}

th {
  background: var(--g100);
  color: var(--ink);
  font-weight: 600;
  text-align: left;
  padding: 6px 8px;
}

td {
  padding: 6px 8px;
  border-top: 1px solid var(--g200);
  vertical-align: top;
  color: var(--ink);
}

td:first-child {
  font-weight: 600;
  color: var(--ink);
}

.quick-wins {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 10px;
}

.quick-win-card {
  background: #fff;
  border: 1px solid var(--g200);
  border-radius: 4px;
  padding: 8px;
  font-size: 10px;
}

.quick-win-title {
  font-weight: 600;
  margin-bottom: 4px;
  font-size: 11px;
}

.roadmap {
  border-left: 1px solid var(--ink);
  padding-left: 8px;
  margin-top: 12px;
}

.roadmap-item {
  margin-bottom: 10px;
}

.roadmap-title {
  font-weight: 600;
  font-size: 11px;
}

.footer {
  text-align: center;
  font-size: 9px;
  color: var(--g500);
  border-top: 1px solid var(--g200);
  padding: 8px;
  position: fixed;
  bottom: 0;
  left: 0;
  right: 0;
  background: #fff;
  page-break-inside: avoid;
}
</style>
</head>
<body>

<div class="header">
  <img class="logo" src="https://somaspace.site/icon.png" alt="Soma logo" />
  <h1>${t.reportTitle}</h1>
  <p class="subtitle">
    ${t.siteEvaluated}: <strong>${data.site}</strong> • ${t.date}: ${data.date}
  </p>
</div>

<!-- Aquí continúan las secciones dinámicas -->

<div class="footer">
  Generated by SomaSpace © 2025
</div>

</body>
</html>




      <div class="section">
        <h2 class="section-title">1. ${t.introduction}</h2>
        <p>${data.introduction}</p>
      </div>

      <div class="section">
        <h2 class="section-title">2. ${t.findings}</h2>
        <table>
          <thead>
            <tr>
              <th>Área</th>
              <th>¿Qué encontramos?</th>
              <th>¿Por qué importa?</th>
            </tr>
          </thead>
          <tbody>
            ${data.hallazgos.map(h => `
              <tr>
                <td style="font-weight: 600; ">${h.area}</td>
                <td>${h.what}</td>
                <td>${h.why}</td>
              </tr>
            `).join('')}
          </tbody>
        </table>
      </div>

      <div class="section">
        <h2 class="section-title">3. ${t.quickWins}</h2>
        <div class="quick-wins">
          ${data.quickWins.map(q => `
            <div class="quick-win-card">
              <h3 class="quick-win-title">${q.tarea}</h3>
              <p><strong>${t.impact}:</strong> ${stars(q.impacto)}</p>
              <p><strong>${t.effort}:</strong> ${q.esfuerzo}</p>
            </div>
          `).join('')}
        </div>
      </div>

      <div class="section">
        <h2 class="section-title">4. ${t.roadmap}</h2>
        <div class="roadmap">
          ${data.roadmap.map((r, i) => `
            <div class="roadmap-item">
              <h3 class="roadmap-title">${i + 1}. ${r.title}</h3>
              <p>${r.description}</p>
            </div>
          `).join('')}
        </div>
      </div>

      <div class="section">
        <h2 class="section-title">5. ${t.conclusion}</h2>
        <p>${data.conclusion}</p>
      </div>

      <div class="footer">
        Generated by SomaSpace © 2025
      </div>
    </body>
    </html>
  `;
}

// Endpoint para generar PDF
app.post('/generate-pdf', async (req, res) => {
  try {
    const { data } = req.body;
    
    if (!data) {
      return res.status(400).json({ error: 'No data provided' });
    }

    // Validar que tenga las propiedades necesarias
    const requiredFields = ['site', 'date', 'lang', 'introduction', 'hallazgos', 'quickWins', 'roadmap', 'conclusion'];
    const missing = requiredFields.filter(field => !data[field]);
    
    if (missing.length > 0) {
      return res.status(400).json({ error: `Missing required fields: ${missing.join(', ')}` });
    }

    // Generar HTML
    const html = generateHTML(data);
    
    // Lanzar Puppeteer
    const browser = await puppeteer.launch({
      headless: true,
      args: ['--no-sandbox', '--disable-setuid-sandbox'] // Para Railway
    });
    
    const page = await browser.newPage();
     await page.setContent(html, {
     waitUntil: 'domcontentloaded',
     timeout: 120000 // 2 minutos
});

    
    // Generar PDF
    const pdf = await page.pdf({
      format: 'A4',
      printBackground: true,
      margin: {
        top: '20px',
        right: '20px',
        bottom: '20px',
        left: '20px'
      }
    });
    
    await browser.close();
    
    // Retornar PDF
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', 'attachment; filename="audit-report.pdf"');
    res.send(pdf);
    
  } catch (error) {
    console.error('Error generating PDF:', error);
    res.status(500).json({ error: 'Failed to generate PDF' });
  }
});

// Health check
app.get('/health', (req, res) => {
  res.json({ status: 'OK', timestamp: new Date().toISOString() });
});

// Endpoint para probar la generación de PDF con datos de ejemplo
app.get('/generate-test-pdf', async (req, res) => {
  try {
    const testData = {
      site: "ejemplo.com",
      date: "2025-01-15",
      lang: "es",
      introduction: "Este es un reporte de auditoría completo para evaluar el rendimiento y la optimización del sitio web. Hemos analizado diversos aspectos técnicos y de usabilidad.",
      hallazgos: [
        {
          area: "Rendimiento",
          what: "Tiempo de carga lento (4.2s)",
          why: "Afecta la experiencia del usuario y el SEO"
        },
        {
          area: "SEO",
          what: "Falta de meta descriptions",
          why: "Reduce la visibilidad en motores de búsqueda"
        },
        {
          area: "Accesibilidad",
          what: "Contraste bajo en algunos botones",
          why: "Dificulta la navegación para usuarios con discapacidades visuales"
        }
      ],
      quickWins: [
        {
          tarea: "Optimizar imágenes",
          impacto: 4,
          esfuerzo: "2 horas"
        },
        {
          tarea: "Agregar meta descriptions",
          impacto: 3,
          esfuerzo: "1 hora"
        },
        {
          tarea: "Mejorar contraste de botones",
          impacto: 2,
          esfuerzo: "30 minutos"
        }
      ],
      roadmap: [
        {
          title: "Optimización de rendimiento",
          description: "Implementar lazy loading y compresión de archivos"
        },
        {
          title: "Mejoras de SEO",
          description: "Auditoría completa de palabras clave y estructura"
        },
        {
          title: "Accesibilidad completa",
          description: "Implementar ARIA labels y navegación por teclado"
        }
      ],
      conclusion: "El sitio web tiene un potencial significativo de mejora. Con las implementaciones propuestas, se puede lograr un aumento del 40% en el rendimiento y una mejor experiencia de usuario."
    };

    // Generar HTML
    const html = generateHTML(testData);
    
    // Lanzar Puppeteer
    const browser = await puppeteer.launch({
      headless: true,
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    });
    
    const page = await browser.newPage();
    await page.setContent(html);
    
    // Generar PDF
    const pdf = await page.pdf({
      format: 'A4',
      printBackground: true,
      margin: {
        top: '20px',
        right: '20px',
        bottom: '20px',
        left: '20px'
      }
    });
    
    await browser.close();
    
    // Retornar PDF
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', 'attachment; filename="test-audit-report.pdf"');
    res.send(pdf);
    
  } catch (error) {
    console.error('Error generating test PDF:', error);
    res.status(500).json({ error: 'Failed to generate test PDF' });
  }
});

// Endpoint de ejemplo con datos de prueba
app.get('/test-data', (req, res) => {
  const testData = {
    site: "ejemplo.com",
    date: "2025-01-15",
    lang: "es",
    introduction: "Este es un reporte de auditoría completo para evaluar el rendimiento y la optimización del sitio web. Hemos analizado diversos aspectos técnicos y de usabilidad.",
    hallazgos: [
      {
        area: "Rendimiento",
        what: "Tiempo de carga lento (4.2s)",
        why: "Afecta la experiencia del usuario y el SEO"
      },
      {
        area: "SEO",
        what: "Falta de meta descriptions",
        why: "Reduce la visibilidad en motores de búsqueda"
      },
      {
        area: "Accesibilidad",
        what: "Contraste bajo en algunos botones",
        why: "Dificulta la navegación para usuarios con discapacidades visuales"
      }
    ],
    quickWins: [
      {
        tarea: "Optimizar imágenes",
        impacto: 4,
        esfuerzo: "2 horas"
      },
      {
        tarea: "Agregar meta descriptions",
        impacto: 3,
        esfuerzo: "1 hora"
      },
      {
        tarea: "Mejorar contraste de botones",
        impacto: 2,
        esfuerzo: "30 minutos"
      }
    ],
    roadmap: [
      {
        title: "Optimización de rendimiento",
        description: "Implementar lazy loading y compresión de archivos"
      },
      {
        title: "Mejoras de SEO",
        description: "Auditoría completa de palabras clave y estructura"
      },
      {
        title: "Accesibilidad completa",
        description: "Implementar ARIA labels y navegación por teclado"
      }
    ],
    conclusion: "El sitio web tiene un potencial significativo de mejora. Con las implementaciones propuestas, se puede lograr un aumento del 40% en el rendimiento y una mejor experiencia de usuario."
  };
  
  res.json(testData);
});

const PORT = process.env.PORT || 8080;

app.get('/', (req, res) => {
  res.status(200).json({ 
    status: 'ok', 
    message: 'PDF Generator Service is running',
    endpoints: {
      testData: '/test-data',
      generatePdf: '/generate-pdf'
    }
  });
});

app.get('/health', (req, res) => {
  res.status(200).json({ status: 'ok' });
});

// Solo UN app.listen()
const server = app.listen(PORT, '0.0.0.0', () => {
  console.log(`PDF service running on port ${PORT}`);
  console.log(`Health check: https://your-app.railway.app/health`);
  console.log(`Test data: https://your-app.railway.app/test-data`);
});

// Manejo de señales para cierre graceful
process.on('SIGTERM', () => {
  console.log('Received SIGTERM, shutting down gracefully...');
  server.close(() => {
    console.log('Server closed');
    process.exit(0);
  });
});

process.on('SIGINT', () => {
  console.log('Received SIGINT, shutting down gracefully...');
  server.close(() => {
    console.log('Server closed');
    process.exit(0);
  });
});
